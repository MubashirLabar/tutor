import { Request, Response } from 'express';
import { successResponse, failureResponse } from '../utils/responses';
import { IAgent, IUser, ICSUser } from '../interfaces';
import AgentService from '../services/agent.service';
import { sendEmail } from '../services/notification.service';
import { v4 as uuidv4 } from 'uuid';

export class AgentController extends AgentService {
  protected createAgentAsync = async (req: Request, res: Response) => {
    const { user } = req.body;
    const userObj = await this.getUser(user);
    if (!userObj) {
      return failureResponse(`User doesn't exists.`, null, res);
    }
    const agentObject: IAgent = { ...req.body };
    try {
      const agentCreated = await this.createAgent(agentObject);
      userObj.agentProfile = agentCreated._id;
      await userObj.save();
      successResponse('Agent profile created successfully.', agentCreated, res);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      if (error.code === 11000) {
        return failureResponse('Agent profile already exists.', error, res);
      }
      failureResponse('Failed to create Agent Profile', error, res);
    }
  };

  protected createCSUserAsync = async (req: Request, res: Response) => {
    const verify_code = uuidv4();
    const user: IUser = { ...req.body, verification_link: verify_code };
    try {
      const pass = uuidv4();
      user.password = pass;
      const userCreated = await this.createUser(user);
      const csUser: ICSUser = {
        created_by_agent: req.params.id as unknown as IUser,
        user: user._id as unknown as IUser
      };
      const csUserCreated = await this.createCSUser(csUser);
      userCreated.csProfile = csUserCreated._id;
      await userCreated.save();
      sendEmail(userCreated.email, 'Email Verification', 'verify_email', {
        first_name: userCreated.first_name,
        last_name: userCreated.last_name,
        link: `${req.protocol}://${req.hostname}${
          req.hostname === 'localhost' ? ':3000' : ''
        }/v1/api/users/verification/${verify_code}`
      });
      successResponse(
        'Customer support user added successfully.',
        { ...userCreated._doc, autoGeneratedPassword: pass, ...csUser },
        res
      );
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.log(error);
      if (error.code === 11000) {
        return failureResponse('Email already exists.', error, res);
      }
      failureResponse('Failed to create customer support user', error, res);
    }
  };

  protected getCSUsersAsync = async (req: Request, res: Response) => {
    try {
      const users = await this.getCSUsers(req.params.id as unknown as IUser);
      successResponse(
        'Fetched all customer support users successfully.',
        users,
        res
      );
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      failureResponse('Failed to create Agent Profile', error, res);
    }
  };

  protected deleteCSUserAsync = async (req: Request, res: Response) => {
    const { userId } = req.params;
    const csUser = await this.getACSUser(userId);
    if (!csUser) {
      return failureResponse(`User doesn't exists.`, null, res);
    }
    const user = await this.getUser(csUser.user as unknown as string);
    try {
      await this.deleteUser(csUser.user as unknown as string);
      await this.deleteCSUser(userId);
      successResponse('User deleted successfully.', { ...user._doc }, res);
    } catch (error: unknown) {
      console.log(error);
      failureResponse('Failed to delete user', error, res);
    }
  };

  protected getAllAgentsAsync = async (req: Request, res: Response) => {
    const filter = req.query;
    try {
      const agents = [];
      const agentObject = await this.getAllAgents(filter);
      if (!agentObject.length) {
        return failureResponse('Agent profiles not found.', null, res);
      }
      const host = `${req.protocol}://${req.get('host')}/static/images/`;
      agentObject.forEach((agent) => {
        const user: IUser = agent.user as IUser;
        if (user.image_path) {
          user.image_path = host + user.image_path;
        } else {
          user.image_path = '';
        }
        const user_id = user._id;
        delete user.referral_code;
        delete user._id;
        delete agent.user;

        agents.push({ ...agent, ...user, user_id });
      });
      successResponse('Agent profiles fetched successfully.', agents, res);
    } catch (error: unknown) {
      failureResponse('Failed to fetch agent profiles', error, res);
    }
  };

  protected getAgentAsync = async (req: Request, res: Response) => {
    const { params } = req;
    try {
      const agentObject = await this.getAgent(params.id);
      if (!agentObject) {
        return failureResponse('Agent profile not found.', null, res);
      }
      const host = `${req.protocol}://${req.get('host')}/static/images/`;
      const user: IUser = agentObject.user as IUser;
      if (user.image_path) {
        user.image_path = host + user.image_path;
      } else {
        user.image_path = '';
      }
      const user_id = user._id;
      delete user._id;
      delete agentObject.user;
      const agent = { ...agentObject, ...user, user_id };
      successResponse('Agent fetched successfully.', agent, res);
    } catch (error: unknown) {
      failureResponse('Failed to fetch agent', error, res);
    }
  };
  protected getReferralsAsync = async (req: Request, res: Response) => {
    try {
      const students: IUser[] = [];
      const agent = await this.getAgent(req.params.id);
      if (!agent) {
        return failureResponse('Agent profile not found.', null, res);
      }
      const referrals = await this.getReferrals(agent.user as unknown as IUser);
      if (!referrals.length) {
        return failureResponse('No referrals found.', null, res);
      }
      referrals.forEach((referral) => {
        students.push(referral.referred_user);
      });
      successResponse('Referrals fetched successfully.', students, res);
    } catch (error: unknown) {
      failureResponse('Failed to fetch referrals', error, res);
    }
  };
  protected updateAgentAsync = async (req: Request, res: Response) => {
    try {
      const { params, body } = req;
      const agent = await this.getAgent(params.id);
      if (!agent) {
        return failureResponse('No agent found with provided Id', null, res);
      }
      // body.amount = agent.amount + body.amount || 0;
      // body.total_earned = agent.total_earned + body.total_earned || 0;
      // body.total_jobs_completed =
      //   agent.total_jobs_completed + body.total_jobs_completed || 0;
      // body.total_jobs_in_progress =
      //   agent.total_jobs_in_progress + body.total_jobs_in_progress || 0;
      // body.updated_at = new Date();

      await this.updateAgent(body, params.id);
      successResponse('Agent Profile updated successfully.', agent, res);
    } catch (error: unknown) {
      console.log(error);
      failureResponse('Error occured', error, res);
    }
  };

  protected deleteAgentAsync = async (req: Request, res: Response) => {
    try {
      const agentObject: IAgent = await this.getAgent(req.params.id);
      if (!agentObject) {
        return failureResponse('No agent found with provided Id', null, res);
      }
      const deletedAgent = await this.deleteAgent(req.params.id);
      successResponse(
        'Agent Profile was deleted  successfull',
        deletedAgent,
        res
      );
    } catch (error: unknown) {
      failureResponse('Error occured', error, res);
    }
  };
}

export default new AgentController();
